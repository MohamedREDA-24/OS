#include <inc/lib.h>

// malloc()
//	This function use BEST FIT strategy to allocate space in heap
//  with the given size and return void pointer to the start of the allocated space

//	To do this, we need to switch to the kernel, allocate the required space
//	in Page File then switch back to the user again.
//
//	We can use sys_allocateMem(uint32 virtual_address, uint32 size); which
//		switches to the kernel mode, calls allocateMem(struct Env* e, uint32 virtual_address, uint32 size) in
//		"memory_manager.c", then switch back to the user mode here
//	the allocateMem function is empty, make sure to implement it.

//==================================================================================//
//============================ REQUIRED FUNCTIONS ==================================//
//==================================================================================//

struct freespace {
	uint32 free_address;
	uint32 pages_needed;
	uint32 size;
};
struct freespace freespaces[((USER_HEAP_MAX - USER_HEAP_START) / PAGE_SIZE)];
bool filled_spaces[((USER_HEAP_MAX-USER_HEAP_START))/PAGE_SIZE]={0};
uint32 adds[((USER_HEAP_MAX-USER_HEAP_START))/PAGE_SIZE];

void* malloc(uint32 size)
{
	/*//TODO: [PROJECT 2023 - MS2 - [2] User Heap] malloc() [User Side]
	// Write your code here, remove the panic and write your code
	panic("malloc() is not implemented yet...!!");

	// Steps:
	//	1) Implement BEST FIT strategy to search the heap for suitable space
	//		to the required allocation size (space should be on 4 KB BOUNDARY)
	//	2) if no suitable space found, return NULL
	//	 Else,
	//	3) Call sys_allocateMem to invoke the Kernel for allocation
	// 	4) Return pointer containing the virtual address of allocated space,
	//

	//This function should find the space of the required range
	// ******** ON 4KB BOUNDARY ******************* //
*/
	size = ROUNDUP(size , PAGE_SIZE) ;
	int num_pages = size / PAGE_SIZE ;
	int counter=0;
	int n =0;
	//uint32 freespaces[n];
	uint32 freespaces_add[n];
    bool check=0;


	bool update=0;
	int indxFI=0;
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Make array contains Free spaces ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	for(uint32 i=USER_HEAP_START;i<USER_HEAP_MAX;i+=PAGE_SIZE){

		adds[indxFI]=i;

		indxFI++;

	}		//main for loop (frame info)

	int length = sizeof(filled_spaces)/sizeof(filled_spaces[0]);

	for(int i=0;i<length;i++){

		if(filled_spaces[i]==0)	{
			if(counter==0){

				//freespaces_add[n]=adds[i];
				freespaces[n].free_address=adds[i];
			}

			counter++;
			update=1;

		}


		else if (filled_spaces[i]==1){

			if(counter>0){
				freespaces[n].size=counter;
				freespaces[n].pages_needed=num_pages;
				n++;
			}
			counter=0;
		}
	}

	 if(update==0){
	return NULL;
	}


//  ~~~~~~~~~~~~~~~~~~~~~~~~~ Apply Best Fit strategy~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	int32 difference[n];
	int length_diff = sizeof(difference)/sizeof(difference[0]);

// 	~~~~~~~~~ get the best choice of free_spaces !`~~~~~~~~~~~

	int s=0;
	for(int i=0;i<length_diff;i++){
		s=freespaces[i].size-num_pages;
		if(s>=0)
			difference[i]=s;
		else
			difference[i]=100000;
	}

//       	~~~~~~~~~ get minimum difference !`~~~~~~~~~~~

	int min = difference[0];
	int indx_bestfit=0;

	for (int i = 0; i < length_diff; i++) {

	   if(difference[i] < min) {
		   min = difference[i];
		   indx_bestfit=i;
	   }
	}


	if(min>=100000){
		return NULL; //no suitable space found
	}


//            ****************************************************************

//       ~~~~~~~~ indx_bestfit = indx of min difference between freespaces and num_pages needed ~~~~~~~~~~~~~~~~~~

		uint32 start_VA_bestfit=freespaces[indx_bestfit].free_address;

//            ****************************************************************

// ~~~~~~~~~~~~~~~~ update filled_spaces to 1 in filled addresses  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		int length_adds = sizeof(adds)/sizeof(adds[0]);
		int filled_indx=0;

		for(int i=0;i<length_adds;i++){
			if(start_VA_bestfit==adds[i]){
				filled_indx=i;
			}
		}

		for(int j=0;j<num_pages;j++){
			filled_spaces[filled_indx]=1;
			filled_indx++;

		}


//           *****************************************************************


//  Call sys_allocateMem to invoke the Kernel for allocation   @@!!!!@@!@!@!@!!@!@!@

		sys_allocateMem (start_VA_bestfit,  num_pages);

	/*//Use sys_isUHeapPlacementStrategyBESTFIT() to check the current strategy

	//change this "return" according to your answer
*/
	return (void *)start_VA_bestfit;
}

void* smalloc(char *sharedVarName, uint32 size, uint8 isWritable) {
	// Write your code here, remove the panic and write your code

	panic("smalloc() is not required...!!");

	// Steps:
	//	1) Implement BEST FIT strategy to search the heap for suitable space
	//		to the required allocation size (space should be on 4 KB BOUNDARY)
	//	2) if no suitable space found, return NULL
	//	 Else,
	//	3) Call sys_createSharedObject(...) to invoke the Kernel for allocation of shared variable
	//		sys_createSharedObject(): if succeed, it returns the ID of the created variable. Else, it returns -ve
	//	4) If the Kernel successfully creates the shared variable, return its virtual address
	//	   Else, return NULL

	//This function should find the space of the required range
	// ******** ON 4KB BOUNDARY ******************* //

	//Use sys_isUHeapPlacementStrategyBESTFIT() to check the current strategy

	//change this "return" according to your answer
	return 0;
}

void* sget(int32 ownerEnvID, char *sharedVarName) {
	// Write your code here, remove the panic and write your code
	panic("sget() is not required ...!!");

	// Steps:
	//	1) Get the size of the shared variable (use sys_getSizeOfSharedObject())
	//	2) If not exists, return NULL
	//	3) Implement BEST FIT strategy to search the heap for suitable space
	//		to share the variable (should be on 4 KB BOUNDARY)
	//	4) if no suitable space found, return NULL
	//	 Else,
	//	5) Call sys_getSharedObject(...) to invoke the Kernel for sharing this variable
	//		sys_getSharedObject(): if succeed, it returns the ID of the shared variable. Else, it returns -ve
	//	6) If the Kernel successfully share the variable, return its virtual address
	//	   Else, return NULL
	//

	//This function should find the space for sharing the variable
	// ******** ON 4KB BOUNDARY ******************* //

	//Use sys_isUHeapPlacementStrategyBESTFIT() to check the current strategy

	//change this "return" according to your answer
	return 0;
}

// free():
//	This function frees the allocation of the given virtual_address
//	To do this, we need to switch to the kernel, free the pages AND "EMPTY" PAGE TABLES
//	from page file and main memory then switch back to the user again.
//
//	We can use sys_freeMem(uint32 virtual_address, uint32 size); which
//		switches to the kernel mode, calls freeMem(struct Env* e, uint32 virtual_address, uint32 size) in
//		"memory_manager.c", then switch back to the user mode here
//	the freeMem function is empty, make sure to implement it.

void free(void* virtual_address) {
	/*//TODO: [PROJECT 2023 - MS2 - [2] User Heap] free() [User Side]
	// Write your code here, remove the panic and write your code
	panic("free() is not implemented yet...!!");

	//you should get the size of the given allocation using its address
	//you need to call sys_freeMem()
	//refer to the project presentation and documentation for details*/


	int numpages=0;
	int n=((USER_HEAP_MAX-USER_HEAP_START))/PAGE_SIZE;
	int indx_to_free=0;
	
//    ~~~~~~~~~~~~~~~~~~~ Get indx of VA to check ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	for (int i=0;i<n;i++)
	{

		if((uint32)virtual_address==adds[i]){
			indx_to_free=i;
		}
		if(freespaces[i].free_address==(uint32)virtual_address){
			numpages=freespaces[i].pages_needed;
		}
	}
	
// ~~~~~~~~~~~~~~~~~~~~~~ free filled pages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if(filled_spaces[indx_to_free]==1){

		for(int z=0;z<numpages;z++){

			filled_spaces[indx_to_free]=0;
			indx_to_free++;
		}

	}
	sys_freeMem((uint32)virtual_address,numpages);

}

//==================================================================================//
//============================== BONUS FUNCTIONS ===================================//
//==================================================================================//

//=============
// [1] sfree():
//=============
//	This function frees the shared variable at the given virtual_address
//	To do this, we need to switch to the kernel, free the pages AND "EMPTY" PAGE TABLES
//	from main memory then switch back to the user again.
//
//	use sys_freeSharedObject(...); which switches to the kernel mode,
//	calls freeSharedObject(...) in "shared_memory_manager.c", then switch back to the user mode here
//	the freeSharedObject() function is empty, make sure to implement it.

void sfree(void* virtual_address) {
	// Write your code here, remove the panic and write your code
	panic("sfree() is not required ...!!");

	//	1) you should find the ID of the shared variable at the given address
	//	2) you need to call sys_freeSharedObject()

}

//===============
// [2] realloc():
//===============

//	Attempts to resize the allocated space at "virtual_address" to "new_size" bytes,
//	possibly moving it in the heap.
//	If successful, returns the new virtual_address, in which case the old virtual_address must no longer be accessed.
//	On failure, returns a null pointer, and the old virtual_address remains valid.

//	A call with virtual_address = null is equivalent to malloc().
//	A call with new_size = zero is equivalent to free().

//  Hint: you may need to use the sys_moveMem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
//		which switches to the kernel mode, calls moveMem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
//		in "memory_manager.c", then switch back to the user mode here
//	the moveMem function is empty, make sure to implement it.

void *realloc(void *virtual_address, uint32 new_size) {
	//TODO: [PROJECT 2023 - MS2 - [4] Bonus1] realloc() [User Side]
	// Write your code here, remove the panic and write your code
	panic("realloc() is not implemented yet...!!");
	return 0;
}
