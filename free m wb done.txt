void __freeMem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size_RU)
{
	//TODO: [PROJECT 2023 - MS2 - [2] User Heap] freeMem() [Kernel Side]
	// Write your code here, remove the panic and write your code
//	panic("__freeMem_with_buffering() is not implemented yet...!!");
//	int s = ROUNDUP(size,PAGE_SIZE);
	int s = size_RU / PAGE_SIZE ;
//	1.	For each BUFFERED page in the given range inside the given environment
	uint32 va =virtual_address;

	for(int i=0;i<s;i++)
	{
		struct Frame_Info* ptr_frame_info = NULL;
		uint32 *ptr_table = NULL;
		uint32 page_permissions = pt_get_page_permissions(e, va);

		  if((page_permissions & PERM_BUFFERED) == PERM_BUFFERED)
		  {
			  if((page_permissions & PERM_MODIFIED) == PERM_MODIFIED)
			  {
				ptr_frame_info = get_frame_info(e->env_page_directory, (void*)va, &ptr_table);
				bufferlist_remove_page(&modified_frame_list,ptr_frame_info);
				pt_set_page_permissions(e, va, 0, PERM_BUFFERED);
				ptr_frame_info->environment=NULL;
				ptr_frame_info->isBuffered=0;

				free_frame(ptr_frame_info);
			  }
			  else
			  {
				ptr_frame_info = get_frame_info(e->env_page_directory, (void*)va, &ptr_table);
				pt_set_page_permissions(e, va, 0, PERM_BUFFERED);
				ptr_frame_info->environment=NULL;
				ptr_frame_info->isBuffered=0;
				bufferlist_remove_page(&free_frame_list,ptr_frame_info);
				free_frame(ptr_frame_info);


			  }
			    pt_clear_page_table_entry(e, va);


		  }
			va+=PAGE_SIZE;

	}
//  2.	Remove ONLY working set pages that are located in the given user virtual address range.
		struct Frame_Info* ptr_frame_info = NULL;
		uint32* ptr_table;
	    va=virtual_address;
	    for(int j=0;j<s;j++)
	    {
			for(int i=0; i<e->page_WS_max_size; i++)
			{
				uint32 ws_va=env_page_ws_get_virtual_address(e,i);
				if(ws_va==va)
				{
					unmap_frame(e->env_page_directory,(void*)va);
					env_page_ws_clear_entry(e,i);
					break;
				}
			}
			va +=PAGE_SIZE;

	    }


//	3.	Remove ONLY the EMPTY page tables in the given range (i.e., no pages are mapped in it)

	    va= virtual_address;
		for(int i=0; i<s; i++)
		{
			int check=1;//true
			ptr_table=NULL;
			get_page_table(e->env_page_directory,(void*)va,&ptr_table);
			if(ptr_table !=NULL)
			{
				for(int j=0; j<1024; j++)
				{
					if(ptr_table[j] != 0)
					{
						check=0; //false
						break;
					}
				}
				if(check==1)
{
					uint32 table_entry= e->env_page_directory [PDX(va)];
					int frame_num=table_entry >>12;
					uint32 ph = frame_num * PAGE_SIZE ;

					struct Frame_Info* ptr_frame_info = to_frame_info(ph);
					free_frame(ptr_frame_info);
//					kfree((void*)ptr_table);
					pd_clear_page_dir_entry(e,(uint32)va);
				}
			}
			va+=PAGE_SIZE;
		}


//	4.	Remove ALL pages in the given range from the page file
    va=virtual_address;
	for(int i=0; i<s;i++)
	{
		pf_remove_env_page(e,va);
		va +=PAGE_SIZE;
	}




	//This function should:
	//1. Free ALL pages of the given range from the Page File
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Free any BUFFERED pages in the given range
	//4. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)

	//Refer to the project presentation and documentation for details
}
